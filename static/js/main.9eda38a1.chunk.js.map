{"version":3,"sources":["component/Player/player.jsx","component/Square/Square.jsx","component/Board/Board.jsx","component/GameContainer/GameContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Player","props","this","nextPlayer","ComputerPlayerDesign","gamePlayerDesign","console","log","btnComputerPlayer","document","getElementById","btnGamePlayer","classList","remove","add","window","setTimeout","t","start","Date","now","Promise","resolve","id","btnPlayerId","className","value","score","Component","Square","state","caseValue","handleClick","bind","e","onSquareClick","parseInt","target","square","index","style","color","classLateSquare","computerPlayer","border","onClick","Board","handleSquareClick","randomNumber","min","max","integer","onBoardChange","i","squares","renderSquare","GameContainer","Array","fill","history","lastMove","char","position","player","startPlayer","randomBool","gamePlayer","stepNumber","gamePlayerScore","computerPlayerScore","handleBoardChange","handleReplayClick","setState","makeComputerMove","a","makeMove","slice","bestSquare","findBestSquare","length","calculateWinner","nextState","concat","reject","lines","b","c","opponent","minimax","isMax","winner","isBoardFilled","best","status","current","onDesignBtnPlayer","React","PureComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9eda38a1.chunk.js","sourcesContent":["import React , {Component} from \"react\"\nimport \"./Player.css\"\n\nexport default class Player extends  Component {\n    \n\n    constructor(props){\n        super(props)\n\n       \n        \n    };\n\n    componentDidMount(){\n        this.props.nextPlayer ? this.ComputerPlayerDesign() : this.gamePlayerDesign()\n        console.log(\"monter\")\n    }\n\n    ComputerPlayerDesign(){\n        \n       const btnComputerPlayer = document.getElementById(\"btnComputerPlayer\")\n       const btnGamePlayer = document.getElementById(\"btnGamePlayer\")\n       if(btnComputerPlayer && btnGamePlayer){\n        btnGamePlayer.classList.remove(\"btn-player-design\")\n            btnComputerPlayer.classList.add(\"btn-player-design\")\n            window.setTimeout(() => {\n                btnComputerPlayer.classList.remove(\"btn-player-design\")\n                btnGamePlayer.classList.add(\"btn-player-design\")\n\n            },1100)\n    }\n\n    }\n\n    gamePlayerDesign(){\n       const btnComputerPlayer = document.getElementById(\"btnComputerPlayer\")\n       const btnGamePlayer = document.getElementById(\"btnGamePlayer\")\n       if(btnComputerPlayer && btnGamePlayer){\n        btnComputerPlayer.classList.remove(\"btn-player-design\")\n          btnGamePlayer.classList.add(\"btn-player-design\")\n       }\n    }\n\n\n\n    wait(t){\n        const start = Date.now()\n        while (Date.now()-start < t){}\n        return new Promise.resolve()\n    }\n\n\n    render(){\n        \n        this.ComputerPlayerDesign()\n    \n\n        return <button id={this.props.btnPlayerId} className=\"btn-player\">\n            <span>{this.props.value}</span>\n            <span>{this.props.score === 0 ? \"-\" : this.props.score }</span>\n        </button>\n    }\n\n\n}","import React , {Component} from \"react\"\nimport \"./Square.css\"\n\n\nexport default class Square extends  Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            caseValue: \"\"\n        }\n        this.handleClick = this.handleClick.bind(this);\n        \n    }\n    \n\n    handleClick(e){\n        this.props.onSquareClick(parseInt(e.target.id))\n    }\n\n\n    render(){\n\n        const square = document.getElementById(this.props.index)\n\n        if ( this.props.value === \"X\"){\n            square.style.color = \"rgb(92, 90, 86)\"\n        }\n        \n        let  classLateSquare  = this.props.value && this.props.value === this.props.computerPlayer ? this.props.classLateSquare : \"\"\n        let className =   this.props.border ===null ? \"square\" : this.props.border\n        return <div className={className} id={this.props.index} onClick={this.handleClick}>\n            <span  className={classLateSquare} >\n                {this.props.value }\n                </span>\n        </div>\n    }\n\n\n}","import React , {Component} from \"react\"\nimport randomNumber from \"random-number\"\nimport Square  from \"../Square/Square\"\nimport Player from \"../Player/player\"\nimport \"./Board.css\"\n\nexport default class Board extends  Component {\n    \n\n    constructor(props){\n        super(props)\n        this.handleSquareClick = this.handleSquareClick.bind(this)\n      \n    };\n\n\n    componentDidMount(){\n        window.setTimeout(()=>{\n            // this.computerPlay()\n        }, 3000)\n        \n        console.log(\"yyoo\")\n    }\n\n    computerPlay(){\n\n         if(!this.props.nextPlayer){\n            const index = randomNumber({\n                min : 0,\n                max : 8,\n                integer : true\n            })\n            this.props.onBoardChange(index)\n\n     }\n\n       \n            \n       \n       \n    }\n\n    // VerifyPlayer(){\n       \n        \n    // }\n\n    // render(){\n\n    //     this.computerPlay()\n    //     console.log(this.rows)\n\n    //     return <div className=\"board\"> \n            \n    //         {this.renderCase(0)}\n    //         {this.renderCase(1)}\n    //         {this.renderCase(2)}\n    //         {this.renderCase(3)}\n    //         {this.renderCase(4)}\n    //         {this.renderCase(5)}\n    //         {this.renderCase(6)}\n    //         {this.renderCase(7)}\n    //         {this.renderCase(8)}\n\n    //     </div>\n    // }\n        \n \n\n\n    handleSquareClick(index) {\n        \n        this.props.onBoardChange(index)\n\n    }\n\n    renderSquare(i, border , classLateSquare) {\n    return (\n        <Square\n            value={this.props.squares[i]}\n            border={border}\n            classLateSquare = {classLateSquare}\n            onSquareClick={this.handleSquareClick}\n            computerPlayer={this.props.computerPlayer}\n            index={i}\n        />\n    );\n    }\n\n\n\n        render() {\n\n            const classLateSquare = \"late\"\n            \n        return (\n            <div className=\"board\">\n           \n            <div className=\"board-row\">\n                {this.renderSquare(0, \"square border-left\", classLateSquare)}\n                {this.renderSquare(1,\"square border-center\", classLateSquare)}\n                {this.renderSquare(2, \"square border-right\", classLateSquare)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderSquare(3, \"square border-left\", classLateSquare)}\n                {this.renderSquare(4, \"square border-center\", classLateSquare)}\n                {this.renderSquare(5,\"square border-right\", classLateSquare)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderSquare(6, \"square border-end-left\", classLateSquare)}\n                {this.renderSquare(7, \"square\")}\n                {this.renderSquare(8, \"square border-end-right\", classLateSquare)}\n            </div>\n\n            </div>\n        );\n        }\n\n            \n\n\n}","import React from \"react\"\nimport randomBool from \"random-bool\"\nimport randomNumber from \"random-number\"\nimport \"./GameContainer.css\"\nimport Player from \"../Player/player\"\nimport Board from \"../Board/Board\"\n\n\nexport default class GameContainer extends React.PureComponent {\n    \n  \n    constructor(props){\n        super(props)\n\n        this.state = {\n            squares: Array(9).fill(null),\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            lastMove:{\n              char: \"\",\n              position: null\n            },\n            player: {\n                startPlayer:randomBool(),\n                gamePlayer:null,\n                computerPlayer:null,\n                 nextPlayer: null,\n            },\n            stepNumber:0,\n            gamePlayerScore : 0,\n            computerPlayerScore : 0\n          \n        };\n        // fixe les differents evenements sur le composant \n        this.handleBoardChange = this.handleBoardChange.bind(this);\n        this.handleReplayClick = this.handleReplayClick.bind(this);\n        \n    };\n\n    \n    // MONTRAGE DU COMPOSANT PRINCIPAL , S'EXECUTE UNE SEULE FOIS\n    componentDidMount(){\n      /* verifie si c'est l'ordinateur ou le joueur qui commence a partir du state initial\n    *si le state.player.start player est vrai , alors le joueur commence\n    *sinon l'ordinatuer commence \n    *Modifie ensuite les symboles du joueur et de l'ordinateur de facon aleatoire\n   */\n\n      if (!this.state.player.startPlayer){\n        this.setState((state, props) => ({\n          player: {\n            startPlayer : state.player.startPlayer,\n            computerPlayer : randomBool() ? \"X\" : \"O\"\n          }\n        }))\n  \n        this.setState((state, props) => ({\n          player : {\n            startPlayer : state.player.startPlayer,\n            computerPlayer : state.player.computerPlayer,\n            gamePlayer : state.player.computerPlayer === \"X\" ? \"O\" : \"X\",\n            nextPlayer: state.player.computerPlayer\n          }\n        }))\n      this.makeComputerMove(randomNumber({\n        min : 0,\n        max : 8,\n        integer : true\n    }))\n\n  \n      }else {\n        this.setState((state, props) => ({\n          player: {\n            startPlayer : state.player.startPlayer,\n            gamePlayer : randomBool() ? \"X\" : \"O\"\n          }\n        }))\n  \n        this.setState((state, props) => ({\n          player : {\n            startPlayer : state.player.startPlayer,\n            gamePlayer : state.player.gamePlayer,\n            computerPlayer : state.player.gamePlayer === \"X\" ? \"O\" : \"X\",\n            nextPlayer: state.player.gamePlayer\n          }\n        }))\n      }\n    }\n\n  /************** FONCTIONS DE GESTION DES EVENEMENTS **************/\n  \n\n    /** GESTION DE CLICK SUR LE TABLEAU **/\n    async handleBoardChange(index){\n                \n      // le joueur joue       \n      await this.makeMove(index);\n      console.log(\"premier rendu\")\n\n      \n      // l'ordinateur joue\n      const squares = this.state.history[this.state.stepNumber].squares.slice();\n      const bestSquare = this.findBestSquare(squares, this.state.player.nextPlayer);\n      if (bestSquare !== -1) {\n       \n        await this.makeMove(bestSquare); \n        console.log(\"Deuxieme rendu\")\n      }\n     \n  }\n\n  \n  /** GESTION DE CLICK SUR LE BOUTTON REJOUER **/\n  handleReplayClick(e){\n   \n    if (!this.state.player.startPlayer){\n      this.setState((state, props) => ({\n        player: {\n          startPlayer : state.player.startPlayer,\n          computerPlayer : randomBool() ? \"X\" : \"O\"\n        },\n        \n      }))\n\n      this.setState((state, props) => ({\n        player : {\n          startPlayer : state.player.startPlayer,\n          computerPlayer : state.player.computerPlayer,\n          gamePlayer : state.player.computerPlayer === \"X\" ? \"O\" : \"X\",\n          nextPlayer: state.player.computerPlayer\n        },\n        squares: Array(9).fill(null),\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            lastMove:{\n              char: \"\",\n              position: null\n            },\n      }))\n    this.makeComputerMove(randomNumber({\n      min : 0,\n      max : 8,\n      integer : true\n  }))\n\n\n    }else {\n      this.setState((state, props) => ({\n        player: {\n          startPlayer : state.player.startPlayer,\n          gamePlayer : randomBool() ? \"X\" : \"O\"\n        }\n      }))\n\n      this.setState((state, props) => ({\n        player : {\n          startPlayer : state.player.startPlayer,\n          gamePlayer : state.player.gamePlayer,\n          computerPlayer : state.player.gamePlayer === \"X\" ? \"O\" : \"X\",\n          nextPlayer: state.player.gamePlayer\n        },\n        squares: Array(9).fill(null),\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            lastMove:{\n              char: \"\",\n              position: null\n            },\n      }))\n    }\n  }\n\n\n  /*********************** FIN  *********************/\n\n    \n\n\n  /************** FONCTIONS DE GESTION DES JEUX **************/\n\n    /*PERMET D'EFFECTUER UN TOUR DE JOUR \n         {index} represente l'index de la case jouer\n    */\n    makeMove(index){\n\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if ( squares[index] || this.calculateWinner(squares) ) {\n       \n        return Promise.resolve();\n      }\n      squares[index] = this.state.player.nextPlayer \n      const nextState = {\n        squares :squares,\n        history: history.concat([\n          {\n            squares: squares\n          }\n        ]),\n        player : {\n          startPlayer : this.state.player.startPlayer,\n          gamePlayer : this.state.player.gamePlayer,\n          computerPlayer : this.state.player.computerPlayer,\n          nextPlayer: this.state.player.nextPlayer === \"X\" ?  \"O\" : \"X\"\n        },\n        stepNumber: history.length,\n        };\n    \n        return new Promise((resolve, reject) => {\n          this.setState(nextState, resolve);\n        });\n\n    }\n    \n    // simule le jeux de l'ordinateur lorsqu'il commence la partie\n    makeComputerMove(index){\n        const history = this.state.history.slice();\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares) || squares[index]) {\n          return ;\n        }\n        squares[index] = this.state.player.nextPlayer === \"O\" ? \"O\" : \"X\"\n        this.setState((state, props) => ({\n          squares :squares,\n          history: history.concat([\n            {\n              squares: squares\n            }\n          ]),\n          player : {\n            startPlayer : state.player.startPlayer,\n            gamePlayer : state.player.gamePlayer,\n            computerPlayer : state.player.computerPlayer,\n            nextPlayer: state.player.computerPlayer === \"O\" ? \"X\" : \"O\"\n          },\n          stepNumber: history.length,\n        }));\n        \n    }\n\n\n     /************** FIN **************/\n\n  \n     // Determine si il y'a un jeux gagnant\n    calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }\n\n\n      // verifie si le tableau est plein\n       isBoardFilled(squares) {\n        for (let i = 0; i < squares.length; i++) {\n          if (squares[i] === null) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n\n      \n      /*********** GESTION DES REPONSE DE L'ORDINATEUR **************/\n      findBestSquare(squares, player) {\n        // player est le symbole du joueur en cours \n        // opponent est le symbole de l'ordinateur\n        const opponent = player === 'X' ? 'O' : 'X';\n        \n        const minimax = (squares, isMax) => {\n          const winner = this.calculateWinner(squares);\n          \n          // si le joueur gagne , le score est 1\n          if (winner === player) return { square: -1, score: 1 };\n          \n          // si l'ordinateur gagne , le score est -1\n          if (winner === opponent) return { square: -1, score: -1 };\n          \n          // Si le partie est acheve, le score est 0\n          if (this.isBoardFilled(squares)) return { square: -1, score: 0 };\n          \n          // Initialisez 'best'. Si isMax est vrai, nous voulons maximiser le score, et le minimiser sinon.\n          const best = { square: -1, score: isMax ? -1000 : 1000 };\n          \n          // Parcourez chaque case du tableau\n          for (let i = 0; i < squares.length; i++) {\n            // Si la case est déjà rempli, ce n'est pas un coup valide alors sautez-le\n            if (squares[i]) {\n              continue;\n            }\n            \n            // Si la case n'est pas rempli, alors c'est un coup valide. Jouez dans la case.\n            squares[i] = isMax ? player : opponent;\n            /* Simulez le jeu jusqu'à la fin du jeu et obtenez le score,\n            en appelant récursivement minimax.*/ \n            const score = minimax(squares, !isMax).score;\n            // Annule le mouvement\n            squares[i] = null;\n      \n            if (isMax) {\n              // Maximiser le joueur ; suivre le plus grand score et se déplacer.\n              if (score > best.score) {\n                best.score = score;\n                best.square = i;\n              }\n            } else {\n              // Minimiser l'ordinateur ; suivre le plus petit score et se déplacer.\n              if (score < best.score) {\n                best.score = score;\n                best.square = i;\n              }\n            }\n          }\n          \n          // Le coup qui mène au meilleur score en fin de partie.\n          return best;\n        };\n        \n        // Le meilleur coup pour le « joueur » donné sur le plateau actuel\n        return minimax(squares, true).square;\n      }\n     \n\n    render(){\n\n        const history = this.state.history;\n        let current = history[history.length - 1];\n        \n        const winner = this.calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status =  winner + ' a gagné';\n        } else {\n            status = 'C\\'est a  ' + (this.state.player.nextPlayer === \"X\" ? \"O\" : \"X\") + \" de jouer\";\n        }\n\n       \n        return <div className=\"game-container\">\n              <div className=\"container-player-btn\">\n\n                      <Player \n                      value={this.state.player.gamePlayer} \n                      startPlayer={this.state.player.startPlayer} \n                      onDesignBtnPlayer= {this.state.player.startPlayer === true ? this.gamePlayerDesign : this.ComputerPlayerDesign}\n                      btnPlayerId = \"btnGamePlayer\"\n                      nextPlayer={this.state.player.startPlayer}\n                      score={this.state.gamePlayerScore}\n                      />\n                      <Player\n                       value={this.state.player.computerPlayer} \n                       startPlayer={this.state.player.startPlayer} \n                       nextPlayer={this.state.player.startPlayer}\n                      onDesignBtnPlayer= {this.state.player.startPlayer === true ? this.gamePlayerDesign : this.ComputerPlayerDesign}\n                       btnPlayerId = \"btnComputerPlayer\"\n                       score={this.state.computerPlayerScore}\n                        />\n                    \n              </div>\n\n              <div className=\"status\">\n                <p>{status}</p>\n                {/* <p>{JSON.stringify(this.state)}</p> */}\n              </div>\n\n              <div className=\"container-board\">\n                \n                    <Board \n                    squares={current.squares} \n                    computerPlayer={this.state.player.computerPlayer} \n                    onBoardChange={this.handleBoardChange}\n                    />\n              </div>    \n             \n\n              <div className=\"replay-btn\">\n                    <span onClick={this.handleReplayClick}>REJOUER</span>\n              </div>\n         \n           \n        </div>\n\n    }\n\n\n}","// import logo from './logo.svg';\nimport './App.css';\n\n// import Board from './component/board/board'\nimport GameContainer from './component/GameContainer/GameContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}